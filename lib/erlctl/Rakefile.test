namespace :test do
  desc 'sets up the Erlang "common test" framework using sudo'
  # Testing
  task :setup_ct do |t|
    installer = File.join(ct_root,'install.sh')
    privbin = File.join(ct_root,'priv','bin')
    sh "sudo mkdir -p #{ct_root}/priv/bin"
    sh "sudo #{installer} #{otp_lib}"
  end
  
  desc 'run tests using common_test'
  task :run => ["build:compile"] do |t|
    require 'find'
  
    # Probe Environment
    runtest = ct_runtest
    config  = File.expand_path "config/default.testconf"
    cover   = File.expand_path "config/cover.spec"
    cmdline = "#{runtest} -config #{config} -cover #{cover} -dir"
  
    # Search for Tests and Source Files
    tests = []
    covered = []
    found = false
    Find.find "lib" do |f|
      next unless FileTest.directory? f
      if f =~ %r{/test$}
        tests << f
        found = true
      elsif f =~ %r{/ebin}
        covered << f
      end
    end
    unless found
      puts "No tests found"
      exit 1
    end
  
    # Finish Building Command Line
    tests.each do |t|
      cmdline << " #{File.expand_path t}"
    end
  
    # Build Code Coverage Specification
    cp "templates/cover.spec", "#{cover}"
    cf = File.open cover, "a"
    cf << "{incl_dirs_r,["
    covered.map! do |c|
      "\"#{File.expand_path c}\""
    end
    cf << covered.join(",")
    cf << "]}.\n"
    cf.close
  
    # Run Tests
    chdir "var/" # where the logs are kept
    test_results = open("|#{cmdline}")
    failed = false
    test_results.each_line do |l|
      failed = true if /FAILED/.match l
      print l
    end
    puts ""
    chdir ".."
    if failed
      puts "FAILED TESTS DETECTED"
      exit 1
    end
    if File.exists? File.join ['var','erl_crash.dump']
      puts "TEST SERVER CRASHED"
      exit 1
    end
  end
  
  # TODO: Make this generate the report if it doesn't exist
  desc 'open the report created by common_test (on a Mac)'
  task :report do |t|
    sh "open var/index.html"
  end
  
  desc 'save test logs'
  task :save_logs, [:path] do |t,args|
    args.with_defaults(:path => '~/test_logs/default')
    vault = File.expand_path args[:path]
    current = Dir.glob File.join('var','*')
  
    rm_rf vault
    mkdir_p vault
    cp_r current, vault
  end
  
  desc 'restore test logs'
  task :restore_logs, [:path] do |t,args|
    args.with_defaults(:path => '~/test_logs/default')
    vault = File.expand_path args[:path]
    vault = Dir.glob File.join(vault,'*')
    current = 'var'
  
    rm_rf Dir.glob File.join(current,'*')
    mkdir_p current
    cp_r vault, current
  end
  
  desc 'copy test results and generated docs to some location'
  task :collect_results, [:path] do |t,args|
    # Handle Args
    args.with_defaults(:path => '~/html')
    path = args[:path]
  
    # Build Paths
    where = File.expand_path path
    docs = File.join(where,'doc')
    docpage = File.join(where,'docs.html')
  
    # Clean Out Target Directory
    rm_rf where
    mkdir_p where
  
    # Copy Generated Docs
    app_info = apps
    app_info.each do |app|
      src = Dir.glob File.join([app[:dir], 'doc', '*'])
      dst = File.join docs, app[:spec]
      mkdir_p dst
      cp_r src, dst
    end
  
    # Copy Test Results
    cp_r Dir.glob('var/*'), where
  
    # Generate Main Page
    begin
      require 'mustache'
  
      # Template and Data
      template = <<EOT
<html>
  <head><title>Generated Documentation</title></head>
  <body style="text-align: center; font-family: Verdana, Arial, Helvetica, sans-serif;">
    <h1>Application Documentation</h1>
{{#docs}}
    <p><a href="doc/{{spec}}/index.html">{{pretty}} {{ver}} documentation</a></p>
{{/docs}}
  </body>
</html>
EOT
      data = { :docs => app_info }
  
      # Render Page
      page = File.open docpage, "w"
      page << Mustache.render(template, data)
      page.close
    rescue LoadError
      puts "Unable to generate main page without mustache..."
    end
  end

  desc "Run tests for Continuous Integration Server"
  task :ci, [:project_name] do |t,args|
    # Collect CI Run Info
    project_name = args[:project_name]
    unless project_name
      puts "need project name"
      exit 1
    end
    rev_hash = %x{git rev-parse HEAD}.chomp

    # Build Correct Paths and Argument Lists
    log_dir = File.join ['~','test_logs',project_name]
    www_dir = File.join ['~','html',project_name,rev_hash]
    log_args = Rake::TaskArguments.new [:path], [log_dir]
    collect_args = Rake::TaskArguments.new [:path], [www_dir]

    # Execute Rake Tasks
    Rake::Task["test:restore_logs"].execute(log_args)
    begin
      Rake::Task["build:compile"].execute()
      Rake::Task["build:doc"].execute()
      Rake::Task["test:run"].execute()
    ensure # Clean Up Appropriately But Preserve Exit Behavior
      Rake::Task["test:save_logs"].execute(log_args)
      Rake::Task["test:collect_results"].execute(collect_args)
    end
  end
end
