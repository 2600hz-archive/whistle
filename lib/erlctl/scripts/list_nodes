#!/usr/bin/env escript

get_hostname() ->
  {ok, HostName} = inet:gethostname(),
  HostName.

start_temp_node() ->
  ShortName = "lister" ++ os:getpid(),
  TempName = list_to_atom(ShortName),
  put(myname,ShortName),
  {ok,_} = net_kernel:start( [TempName, shortnames] ),
  case is_alive() of
    true -> ok;
    _ -> failed_to_start_network
  end.

display_nodes( _Me, [] ) ->
  ok;
display_nodes( Me, [ {Me,_Port} | T ] ) ->
  display_nodes(Me,T);
display_nodes( Me, [ {Name,_Port} | T ] ) ->
  io:format("~s~n",[Name]),
  display_nodes(Me,T).

process(HostName) ->
  case start_temp_node() of
    ok ->
      ok;
    _ ->
      io:format("error starting distribution~n"),
      halt(1)
  end,
  case net_adm:names(HostName) of
    {ok,Names} ->
      display_nodes(get(myname),Names);
    {error,Error} ->
      io:format("error enumerating nodes on ~p: ~p~n",[HostName,Error]),
      halt(1)
  end.

main([]) ->
  try process( get_hostname() )
  catch
    A:B ->
      io:format("Soemthing Is Very Broken (~p:~p)~n",[A,B]),
      halt(1)
  end;

main([HostName]) ->
  try process( HostName )
  catch
    A:B ->
      io:format("Soemthing Is Very Broken (~p:~p)~n",[A,B]),
      halt(1)
  end.

