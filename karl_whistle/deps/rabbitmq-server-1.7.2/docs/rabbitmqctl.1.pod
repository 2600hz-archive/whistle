=head1 NAME

rabbitmqctl - command line tool for managing a RabbitMQ broker

=head1 SYNOPSIS

rabbitmqctl [-n I<node>] I<<command>> [command options]

=head1 DESCRIPTION

RabbitMQ is an implementation of AMQP, the emerging standard for high
performance enterprise messaging. The RabbitMQ server is a robust and
scalable implementation of an AMQP broker.

rabbitmqctl is a command line tool for managing a RabbitMQ broker.
It performs all actions by connecting to one of the broker's nodes.


=head1 OPTIONS

=over 

=item B<-n> I<node>

Default node is C<rabbit@server>, where server is the local host.  On
a host named C<server.example.com>, the node name of the RabbitMQ
Erlang node will usually be rabbit@server (unless RABBITMQ_NODENAME
has been set to some non-default value at broker startup time).  The
output of hostname -s is usually the correct suffix to use after the
"@" sign. See rabbitmq-server(1) for details of configuring the
RabbitMQ broker.

=item B<-q>

Quiet output mode is selected with the B<-q> flag. Informational
messages are suppressed when quiet mode is in effect.

=back

=head1 COMMANDS

=head2 APPLICATION AND CLUSTER MANAGEMENT

=over

=item stop

Stop the Erlang node on which RabbitMQ broker is running.

=item stop_app

Stop the RabbitMQ application, leaving the Erlang node running.  This
command is typically run prior to performing other management actions
that require the RabbitMQ application to be stopped, e.g. I<reset>.

=item start_app

Start the RabbitMQ application.  This command is typically run prior
to performing other management actions that require the RabbitMQ
application to be stopped, e.g. I<reset>.

=item status

Display various information about the RabbitMQ broker, such as whether
the RabbitMQ application on the current node, its version number, what
nodes are part of the broker, which of these are running.

=item reset

Return a RabbitMQ node to its virgin state.  Removes the node from any
cluster it belongs to, removes all data from the management database,
such as configured users, vhosts and deletes all persistent messages.

=item force_reset

The same as I<reset> command, but resets the node unconditionally,
regardless of the current management database state and cluster
configuration.  It should only be used as a last resort if the
database or cluster configuration has been corrupted.

=item rotate_logs [suffix]

Instruct the RabbitMQ node to rotate the log files. The RabbitMQ
broker will attempt to append the current contents of the log file to
the file with the name composed of the original name and the
suffix. It will create a new file if such a file does not already
exist. When no I<suffix> is specified, the empty log file is simply
created at the original location; no rotation takes place.  When an
error occurs while appending the contents of the old log file, the
operation behaves in the same way as if no I<suffix> was specified.
This command might be helpful when you are e.g. writing your own
logrotate script and you do not want to restart the RabbitMQ node.

=item cluster I<clusternode> ...

Instruct the node to become member of a cluster with the specified
nodes determined by I<clusternode> option(s). See
L<http://www.rabbitmq.com/clustering.html> for more information about
clustering.

=item close_connection I<connectionpid> I<explanation>

Instruct the broker to close the connection associated with the Erlang
process id I<connectionpid> (see also the I<list_connections>
command), passing the I<explanation> string to the connected client as
part of the AMQP connection shutdown protocol.

=back

=head2 USER MANAGEMENT

=over

=item add_user I<username> I<password>

Create a user named I<username> with (initial) password I<password>.

=item delete_user I<username>

Delete the user named I<username>.

=item change_password I<username> I<newpassword>

Change the password for the user named I<username> to I<newpassword>.

=item list_users

List all users, one per line.

=back

=head2 ACCESS CONTROL

=over

=item add_vhost I<vhostpath>

Create a new virtual host called I<vhostpath>.

=item delete_vhost I<vhostpath>

Delete a virtual host I<vhostpath>.  This command deletes also all its
exchanges, queues and user mappings.  

=item list_vhosts

List all virtual hosts, one per line.

=item set_permissions [-p I<vhostpath>] I<username> I<regexp> I<regexp> I<regexp>

Set the permissions for the user named I<username> in the virtual host
I<vhostpath>, granting I<configure>, I<write> and I<read> access to
resources with names matching the first, second and third I<regexp>,
respectively.

=item clear_permissions [-p I<vhostpath>] I<username>

Remove the permissions for the user named I<username> in the virtual
host I<vhostpath>.

=item list_permissions [-p I<vhostpath>]

List all the users and their permissions in the virtual host
I<vhostpath>.  Each output line contains the username and their
I<configure>, I<write> and I<read> access regexps, separated by tab
characters.

=item list_user_permissions I<username> 

List the permissions of the user named I<username> across all virtual
hosts.

=back

=head2 SERVER STATUS

=over

=item list_queues [-p I<vhostpath>] [I<queueinfoitem> ...]

List queue information by virtual host. Each line printed
describes a queue, with the requested I<queueinfoitem> values
separated by tab characters.  If no I<queueinfoitem>s are
specified then I<name> and I<messages> are assumed.

=back

=head3 Queue information items

=over

=item name

name of the queue

=item durable

whether the queue survives server restarts

=item auto_delete

whether the queue will be deleted when no longer used

=item arguments

queue arguments

=item pid

id of the Erlang process associated with the queue

=item owner_pid

id of the Erlang process representing the connection which is the
exclusive owner of the queue, or empty if the queue is non-exclusive

=item exclusive_consumer_pid

id of the Erlang process representing the channel of the exclusive
consumer subscribed to this queue, or empty if there is no exclusive
consumer

=item exclusive_consumer_tag

consumer tag of the exclusive consumer subscribed to this queue, or
empty if there is no exclusive consumer

=item messages_ready

number of messages ready to be delivered to clients

=item messages_unacknowledged

number of messages delivered to clients but not yet acknowledged

=item messages_uncommitted

number of messages published in as yet uncommitted transactions

=item messages

sum of ready, unacknowledged and uncommitted messages

=item acks_uncommitted

number of acknowledgements received in as yet uncommitted transactions

=item consumers

number of consumers

=item transactions

number of transactions

=item memory

bytes of memory consumed by the Erlang process for the queue,
including stack, heap and internal structures

=back

=over

=item list_exchanges [-p I<vhostpath>] [I<exchangeinfoitem> ...]

List queue information by virtual host. Each line printed describes an
exchange, with the requested I<exchangeinfoitem> values separated by
tab characters.  If no I<exchangeinfoitem>s are specified then I<name>
and I<type> are assumed.

=back

=head3 Exchange information items

=over

=item name 

name of the exchange

=item type

exchange type (B<direct>, B<topic>, B<fanout>, or B<headers>)

=item durable

whether the exchange survives server restarts

=item auto_delete

whether the exchange is deleted when no longer used

=item arguments

exchange arguments

=back

=over

=item list_bindings [-p I<vhostpath>]

List bindings by virtual host. Each line printed describes a binding,
with the exchange name, queue name, routing key and arguments,
separated by tab characters.

=item list_connections [I<connectioninfoitem> ...]

List current AMQP connections. Each line printed describes a
connection, with the requested I<connectioninfoitem> values separated
by tab characters.  If no I<connectioninfoitem>s are specified then
I<user>, I<peer_address>, I<peer_port> and I<state> are assumed.

=back

=head3 Connection information items

=over

=item pid

id of the Erlang process associated with the connection

=item address

server IP number

=item port

server port

=item peer_address

peer address

=item peer_port

peer port

=item state

connection state (B<pre-init>, B<starting>, B<tuning>, B<opening>,
B<running>, B<closing>, B<closed>)

=item channels

number of channels using the connection

=item user

username associated with the connection

=item vhost

virtual host

=item timeout

connection timeout

=item frame_max

maximum frame size (bytes)

=item client_properties

informational properties transmitted by the client during connection
establishment

=item recv_oct

octets received

=item recv_cnt

packets received

=item send_oct

octets sent

=item send_cnt

packets sent

=item send_pend

send queue size

=back

=over

=item list_channels [I<channelinfoitem> ...]

List channel information. Each line printed describes a channel, with
the requested I<channelinfoitem> values separated by tab characters.
If no I<channelinfoitem>s are specified then I<pid>, I<user>,
I<transactional>, I<consumer_count>, and I<messages_unacknowledged>
are assumed.

The list includes channels which are part of ordinary AMQP connections
(as listed by list_connections) and channels created by various
plug-ins and other extensions.

=back

=head3 Channel information items

=over

=item pid

id of the Erlang process associated with the channel

=item connection

id of the Erlang process associated with the connection to which the
channel belongs

=item number

the number of the channel, which uniquely identifies it within a
connection

=item user

username associated with the channel

=item vhost

virtual host in which the channel operates

=item transactional

true if the channel is in transactional mode, false otherwise

=item consumer_count

number of logical AMQP consumers retrieving messages via the channel

=item messages_unacknowledged

number of messages delivered via this channel but not yet acknowledged

=item acks_uncommitted

number of acknowledgements received in an as yet uncommitted
transaction

=item prefetch_count

QoS prefetch count limit in force, 0 if unlimited

=back

=item list_consumers

List consumers, i.e. subscriptions to a queue's message stream. Each
line printed shows, separated by tab characters, the name of the queue
subscribed to, the id of the channel process via which the
subscription was created and is managed, the consumer tag which
uniquely identifies the subscription within a channel, and a boolean
indicating whether acknowledgements are expected for messages
delivered to this consumer.

=back

The list_queues, list_exchanges, list_bindings and list_consumers
commands accept an optional virtual host parameter for which to
display results, defaulting to I<"/">. The default can be overridden
with the B<-p> flag.

=head1 OUTPUT ESCAPING

Various items that may appear in the output of rabbitmqctl can contain
arbitrary octets.  If a octet corresponds to a non-printing ASCII
character (values 0 to 31, and 127), it will be escaped in the output,
using a sequence consisting of a backslash character followed by three
octal digits giving the octet's value (i.e., as used in string
literals in the C programming language).  An octet corresponding to
the backslash character (i.e. with value 92) will be escaped using a
sequence of two backslash characters.  Octets with a value of 128 or
above are not escaped, in order to preserve strings encoded with
UTF-8.

The items to which this escaping scheme applies are:

=over

=item *
Usernames

=item *
Virtual host names

=item *
Queue names

=item *
Exchange names

=item *
Regular expressions used for access control

=back

=head1 EXAMPLES

Create a user named foo with (initial) password bar at the Erlang node
rabbit@test:

    rabbitmqctl -n rabbit@test add_user foo bar

Grant user named foo access to the virtual host called test at the
default Erlang node:

    rabbitmqctl map_user_vhost foo test

Append the current logs' content to the files with ".1" suffix and reopen
them:

    rabbitmqctl rotate_logs .1

=head1 SEE ALSO

rabbitmq.conf(5), rabbitmq-multi(1), rabbitmq-server(1)

=head1 AUTHOR

The RabbitMQ Team <info@rabbitmq.com>

=head1 REFERENCES

RabbitMQ Web Site: L<http://www.rabbitmq.com>
