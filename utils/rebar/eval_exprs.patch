diff -r 53da0af96feb src/rebar_core.erl
--- a/src/rebar_core.erl	Thu Dec 02 20:13:32 2010 +0100
+++ b/src/rebar_core.erl	Sat Dec 04 23:07:22 2010 -0800
@@ -125,6 +125,7 @@
             %% Set global variables based on getopt options
             set_global_flag(Options, verbose),
             set_global_flag(Options, force),
+	    set_global_flag(Options, eval_exprs),
             DefJobs = rebar_config:get_jobs(),
             case proplists:get_value(jobs, Options, DefJobs) of
                 DefJobs ->
@@ -261,6 +262,7 @@
      {verbose,  $v, "verbose",    undefined, "Be verbose about what gets done"},
      {version,  $V, "version",    undefined, "Show version information"},
      {force,    $f, "force",      undefined, "Force"},
+     {eval_exprs, $e, "eval_exprs", undefined, "Evaluate expressions in template files"},
      {jobs,     $j, "jobs",       integer,   JobsHelp},
      {config,   $C, "config",     string,    "Rebar config file to use"}
     ].
diff -r 53da0af96feb src/rebar_templater.erl
--- a/src/rebar_templater.erl	Thu Dec 02 20:13:32 2010 +0100
+++ b/src/rebar_templater.erl	Sat Dec 04 23:07:22 2010 -0800
@@ -83,7 +83,10 @@
 
     %% Load the template definition as is and get the list of variables the
     %% template requires.
-    TemplateTerms = consult(load_file(Type, Template)),
+    TemplateTerms = case rebar_config:get_global(eval_exprs, "0") of
+			"0" -> consult(load_file(Type, Template));
+			_ -> consult_exprs(load_file(Type, Template))
+		    end,
     case lists:keyfind(variables, 1, TemplateTerms) of
         {variables, Vars} ->
             case parse_vars(Vars, dict:new()) of
@@ -109,7 +112,10 @@
 
     %% Now, use our context to process the template definition -- this permits us to
     %% use variables within the definition for filenames.
-    FinalTemplate = consult(render(load_file(Type, Template), Context)),
+    FinalTemplate = case rebar_config:get_global(eval_exprs, "0") of
+			"0" -> consult(render(load_file(Type, Template), Context));
+			_ -> consult_exprs(render(load_file(Type, Template), Context))
+		    end,
     ?DEBUG("Final template def ~p: ~p\n", [template_id(), FinalTemplate]),
 
     %% Execute the instructions in the finalized template
@@ -229,6 +235,31 @@
             consult(Cont1, eof, Acc)
     end.
 
+%%
+%% Given a string or binary, parse it into a list of expressions, evaluating
+%% those expressions into terms, and returning the list of terms
+%%
+consult_exprs(Str) when is_list(Str) ->
+    consult_exprs([], Str, []);
+consult_exprs(Bin) when is_binary(Bin)->
+    consult_exprs([], binary_to_list(Bin), []).
+
+consult_exprs(Cont, Str, Acc) ->
+    case erl_scan:tokens(Cont, Str, 0) of
+        {done, Result, Remaining} ->
+            case Result of
+                {ok, Tokens, _} ->
+                    {ok, Exprs} = erl_parse:parse_exprs(Tokens),
+		    {value, Terms, _} = erl_eval:exprs(Exprs, []),
+                    consult_exprs([], Remaining, [Terms | Acc]);
+                {eof, _Other} ->
+                    lists:reverse(Acc);
+                {error, Info, _} ->
+                    {error, Info}
+            end;
+        {more, Cont1} ->
+            consult_exprs(Cont1, eof, Acc)
+    end.
 
 %%
 %% Render a binary to a string, using mustache and the specified context
